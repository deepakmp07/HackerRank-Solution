/*We define the following terms:

Lexicographical Order, also known as alphabetic or dictionary order, orders characters as follows:
For example, ball < cat, dog < dorm, Happy < happy, Zoo < ball.

A substring of a string is a contiguous block of characters in the string. For example, the substrings of abc are a, b, c, ab, bc, and abc.
Given a string, , and an integer, , complete the function so that it finds the lexicographically smallest and largest substrings of length .

Function Description

Complete the getSmallestAndLargest function in the editor below.

getSmallestAndLargest has the following parameters:

string s: a string
int k: the length of the substrings to find
Returns

string: the string ' + "\n" + ' where and are the two substrings
Input Format

The first line contains a string denoting .
The second line contains an integer denoting .

Constraints

 consists of English alphabetic letters only (i.e., [a-zA-Z]).
Sample Input 0

welcometojava
3
Sample Output 0

ava
wel
Explanation 0

String  has the following lexicographically-ordered substrings of length :

We then return the first (lexicographically smallest) substring and the last (lexicographically largest) substring as two newline-sepa*/


import java.util.Scanner;

public class Solution {

    public static String getSmallestAndLargest(String s, int k) {
        String smallest = "";
        String largest = "";
        int c=0;
        int d=122;
        String r=s;
        int x=k;
        int i;
        char[] v = s.toCharArray();
        for( i=0;i<s.length();i++) {
            int a = v[i];
            if (a > c)
                c = a;
            if (d > a)
                d = a;
            if (r.length() - k == i) {
                //System.out.print(r.length() - k + " ");
                break;
            }
        }
        char e =(char) c;
        char f =(char) d;
       // System.out.print(c+" "+d);
        //System.out.print(x);
       // System.out.print(r.length());
        //System.out.print(r.length()-k);

        smallest=r.substring(r.indexOf(e),r.indexOf(e)+x);
        largest=r.substring(r.indexOf(f),r.indexOf(f)+x);
       for( i=0;i<r.length();i++) {

           String a = v[i] + r.substring(i + 1, i + x);
           if (a.compareTo(largest) >= 0) {
               largest = a;
           }
           if (a.compareTo(smallest) < 0) {
               //System.out.print(smallest+"\n");
               smallest = a;
           }
           if(r.length()-k==i){
               // System.out.print(i);
               break;
           }
       }

        // Complete the function
        // 'smallest' must be the lexicographically smallest substring of length 'k'
        // 'largest' must be the lexicographically largest substring of length 'k'

        return smallest + "\n" + largest;
    }


    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String s = scan.next();
        int k = scan.nextInt();
        scan.close();
      
        System.out.println(getSmallestAndLargest(s, k));
    }
}
